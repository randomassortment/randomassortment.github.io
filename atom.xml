<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://randomassortment.github.io</id>
    <title>Gridea</title>
    <updated>2020-02-26T05:33:38.353Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://randomassortment.github.io"/>
    <link rel="self" href="https://randomassortment.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://randomassortment.github.io/images/avatar.png</logo>
    <icon>https://randomassortment.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[python面试准备（二）]]></title>
        <id>https://randomassortment.github.io/post/python-mian-shi-zhun-bei-er</id>
        <link href="https://randomassortment.github.io/post/python-mian-shi-zhun-bei-er">
        </link>
        <updated>2020-02-26T05:04:30.000Z</updated>
        <content type="html"><![CDATA[<p>2、Python的主要功能是什么？<br>
Python是一种解释型语言。与C语言等语言不同，Python不需要在运行之前进行编译。<br>
Python是动态语言，当您声明变量或类似变量时，您不需要声明变量的类型。<br>
Python适合面向对象的编程，因为它允许类的定义以及组合和继承。Python没有访问说明（如C ++的public，private）。<br>
在Python中，函数是第一类对象。它们可以分配给变量。类也是第一类对象<br>
编写Python代码很快，但运行比较慢。Python允许基于C的扩展，例如numpy函数库。<br>
Python可用于许多领域。Web应用程序开发，自动化，数学建模，大数据应用程序等等。它也经常被用作“胶水”代码。</p>
<p>3、Python是通用编程语言吗？<br>
Python能够编写脚本，但从一般意义上讲，它被认为是一种通用编程语言。</p>
<p>4、Python是如何解释语言的？<br>
Python在运行之前不需要对程序进行解释。因此，Python是一种解释型语言。</p>
<p>5、什么是pep？<br>
PEP代表Python Enhancement Proposal。它是一组规则，指定如何格式化Python代码以获得最大可读性。</p>
<p>6、如何在Python中管理内存？<br>
python中的内存管理由Python私有堆空间管理。所有Python对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python解释器负责处理这个问题。<br>
Python对象的堆空间分配由Python的内存管理器完成。核心API提供了一些程序员编写代码的工具。<br>
Python还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p>
<p>7、Python中的命名空间是什么？<br>
命名空间是一个命名系统，用于确保名称是唯一性，以避免命名冲突。</p>
<p>8、什么是PYTHONPATH？<br>
它是导入模块时使用的环境变量。每当导入模块时，也会查找PYTHONPATH以检查各个目录中是否存在导入的模块。解释器使用它来确定要加载的模块。</p>
<p>9、什么是python模块？Python中有哪些常用的内置模块？<br>
Python模块是包含Python代码的.py文件。此代码可以是函数类或变量。一些常用的内置模块包括：sys、math、random、data time、JSON。</p>
<p>10、Python中的局部变量和全局变量是什么？<br>
全局变量：在函数外或全局空间中声明的变量称为全局变量。这些变量可以由程序中的任何函数访问。<br>
局部变量：在函数内声明的任何变量都称为局部变量。此变量存在于局部空间中，而不是全局空间中。</p>
<p>11、python是否区分大小写？<br>
是。Python是一种区分大小写的语言。</p>
<p>12、什么是Python中的类型转换？<br>
类型转换是指将一种数据类型转换为另一种数据类型<br>
int（）  - 将任何数据类型转换为整数类型<br>
float（）  - 将任何数据类型转换为float类型<br>
ord（）  - 将字符转换为整数<br>
hex（） - 将整数转换为十六进制<br>
oct（）  - 将整数转换为八进制<br>
tuple（） - 此函数用于转换为元组。<br>
set（） - 此函数在转换为set后返回类型。<br>
list（） - 此函数用于将任何数据类型转换为列表类型。<br>
dict（） - 此函数用于将顺序元组（键，值）转换为字典。<br>
str（） - 用于将整数转换为字符串。<br>
complex（real，imag）  - 此函数将实数转换为复数（实数，图像）数。</p>
<p>14、python中是否需要缩进？<br>
缩进是Python必需的。它指定了一个代码块。循环，类，函数等中的所有代码都在缩进块中指定。通常使用四个空格字符来完成。如果您的代码没有必要缩进，它将无法准确执行并且也会抛出错误。</p>
<p>15、Python数组和列表有什么区别？<br>
Python中的数组和列表具有相同的存储数据方式。但是，数组只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p>
<p>16、Python中的函数是什么？<br>
函数是一个代码块，只有在被调用时才会执行。要在Python中定义函数，需要使用def关键字。</p>
<p>17、什么是__init__?<br>
__init__是Python中的方法或者结构。在创建类的新对象/实例时，将自动调用此方法来分配内存。所有类都有__init__方法。</p>
<p>18、什么是lambda函数？<br>
lambda函数也叫匿名函数，该函数可以包含任意数量的参数，但只能有一个执行操作的语句。</p>
<p>19、Python中的self是什么？<br>
self是类的实例或对象。在Python中，self包含在第一个参数中。但是，Java中的情况并非如此，它是可选的。它有助于区分具有局部变量的类的方法和属性。init方法中的self变量引用新创建的对象，而在其他方法中，它引用其方法被调用的对象。</p>
<p>20、区分break，continue和pass？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python面试准备（一）]]></title>
        <id>https://randomassortment.github.io/post/python-mian-shi-zhun-bei</id>
        <link href="https://randomassortment.github.io/post/python-mian-shi-zhun-bei">
        </link>
        <updated>2020-02-26T04:34:30.000Z</updated>
        <content type="html"><![CDATA[<p>1.什么是Python？<br>
Python是一种面向对象的，交互式的，解释型的计算机程序设计语言。Python的设计具有高可读性，它使用英语关键词而非标点符号，语法结构也比其他语言简单。</p>
<p>2.Python的主要功能是什么？<br>
1）Python是一种解释型语言，因此在使用Python时不需要进行编译<br>
2）声明变量和类似变量时，不需要重复声明变量的类型；<br>
3）Python非常适合面向对象的编程，因为它允许类的定义以及组合和继承；<br>
4）函数是第一类对象，这意味着它们可以分配给变量，从其他函数返回并传递给函数，类也是第一类对象；<br>
5）用于许多领域，包括Web应用程序，自动化，科学建模，大数据应用程序等等。</p>
<p>3.Python编程中的函数是什么？<br>
函数是表示代码块并且是可重用实体的对象。<br>
它为程序带来了模块化，并提供了更高程度的代码可重用性。<br>
Python为我们提供了许多内置函数，例如print（）等，并提供了创建用户定义函数的能力。</p>
<p>4.Python中有多少基本类型的函数可用？<br>
Python为我们提供了两种基本类型的函数：内置和用户定义。<br>
内置函数是Python语言的一部分，比如print（），dir（），len（）和abs（）等。</p>
<p>5.我们如何用Python编写函数？<br>
我们可以通过以下方式创建Python函数。<br>
1）用def定义函数并链接功能名称；<br>
2）传递参数并使用括号将它们括起来，使用冒号来表示结尾；<br>
3）添加所需的Python语句以供执行。</p>
<p>6.列出5个Python标准库<br>
os：提供了不少与操作系统相关联的函数<br>
sys: 通常用于命令行参数<br>
re: 正则匹配<br>
math: 数学运算<br>
datetime:处理日期时间</p>
<p>7.谈下Python的GIL<br>
GIL 是Python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行Python程序的时候会霸占Python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。<br>
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。<br>
多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个Python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大。</p>
<p>8.Python2和Python3的range（100）的区别<br>
Python2返回列表，Python3返回迭代器，节约内存</p>
<p>9.一句话解释什么样的语言能够用装饰器?<br>
函数可以作为参数传递的语言，可以使用装饰器</p>
<p>10.Python内建数据类型有哪些<br>
整型--int<br>
布尔型--bool<br>
字符串--str<br>
列表--list<br>
元组--tuple<br>
字典--dict</p>
<p>11.避免转义给字符串加哪个字母表示原始字符串？<br>
r , 表示需要原始字符串，不转义特殊字符</p>
<p>12.正则re.complie作用<br>
re.compile是将正则表达式编译成一个对象，加快速度，并重复使用</p>
<p>13.数据库优化查询方法<br>
外键、索引、联合查询、选择特定字段等等</p>
<p>14.简述mysql和redis区别<br>
redis：内存型非关系数据库，数据保存在内存中，速度快<br>
mysql：关系型数据库，数据保存在磁盘中，检索的话，会有一定的Io操作，访问速度相对慢</p>
<p>15.遇到bug如何处理<br>
1）细节上的错误，通过print（）打印，能执行到print（）说明一般上面的代码没有问题，分段检测程序是否有问题，如果是js的话可以alert或console.log<br>
2）如果涉及一些第三方框架，会去查官方文档或者一些技术博客。<br>
3）对于bug的管理与归类总结，一般测试将测试出的bug用teambin等bug管理工具进行记录，然后我们会一条一条进行修改，修改的过程也是理解业务逻辑和提高自己编程逻辑缜密性的方法，我也都会收藏做一些笔记记录。<br>
4）导包问题、城市定位多音字造成的显示错误问题</p>
<p>16.列出常见MYSQL数据存储引擎<br>
InnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。<br>
如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。<br>
MyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。<br>
MEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。</p>
<p>17.简述cookie和session的区别<br>
1）session 在服务器端，cookie 在客户端（浏览器）<br>
2）session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效，存储Session时，键与Cookie中的sessionid相同，值是开发人员设置的键值对信息，进行了base64编码，过期时间由开发人员设置<br>
3）cookie安全性比session差</p>
<p>18.列出几种魔法方法并简要介绍用途<br>
<strong>init</strong>:对象初始化方法<br>
<strong>new</strong>:创建对象时候执行的方法，单列模式会用到<br>
<strong>str</strong>:当使用print输出对象的时候，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据<br>
<strong>del</strong>:删除对象执行的方法</p>
<p>19.Python传参数是传值还是传址？<br>
Python中函数参数是引用传递（注意不是值传递）。对于不可变类型（数值型、字符串、元组），因变量不能修改，所以运算不会影响到变量自身；而对于可变类型（列表字典）来说，函数体运算可能会更改传入的参数变量。</p>
<p>20.常见的网络传输协议<br>
UDP、TCP、FTP、HTTP、SMTP等等</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[turtle的用法]]></title>
        <id>https://randomassortment.github.io/post/turtle-de-yong-fa</id>
        <link href="https://randomassortment.github.io/post/turtle-de-yong-fa">
        </link>
        <updated>2020-02-09T12:01:22.000Z</updated>
        <content type="html"><![CDATA[<p>turtle 能执行什么操作？<br>
如果你有一个叫做 lola 的 turtle，那么 ...</p>
<p>移动<br>
lola.forward(n) 告诉 turtle 向前移动 n 个像素。 lola.back(n) 告诉 turtle 向后移动 n 个像素。 n 还可以是负数，这样动作就会颠倒过来。 lola.forward(100) 和 lola.back(-100) 执行的操作一样。 lola.speed(s) 设置 turtle 的速度。速度 0 最快。</p>
<p>转向<br>
lola.right(a) 告诉 turtle 按照 a 角度右转。 lola.left(a) 告诉 turtle 按照 a 角度左转。 a 也可以是负数，这样转向就会颠倒过来。 lola.left(-45) 和 lola.right(45) 执行的操作一样。<br>
turtle 从画布的中心开始，指向你的右侧。 转向始终相对于 turtle 当前的朝向。</p>
<p>绘制<br>
lola.penup() 告诉 turtle 抬笔，因此在移动时不会绘制图形。 lola.pendown() 告诉 turtle 再次落笔，因此会绘制图形。 lola.width(n) 将 turtle 的线条粗细更改为 n 个像素。 lola.color(colorname) 将 turtle 的颜色更改为特定名称的颜色。 颜色用字符串命名，例如 &quot;red&quot;、&quot;white&quot; 或 &quot;chartreuse&quot;。 你还可以使用十六进制颜色，例如 &quot;#ff0000&quot;、&quot;#ffffff&quot; 或 &quot;#7fff00&quot;。<br>
turtle 一开始笔是落下的，颜色为 &quot;black&quot;，粗细为 1 个像素。</p>
<p>隐藏和显示<br>
lola.hideturtle() 告诉 turtle 隐藏自己，因此只显示绘制的图形。 lola.showturtle() 告诉 turtle 取消隐藏自己。</p>
<p>函数定义：<br>
def 函数名（形参）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://randomassortment.github.io/post/hello-gridea</id>
        <link href="https://randomassortment.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>